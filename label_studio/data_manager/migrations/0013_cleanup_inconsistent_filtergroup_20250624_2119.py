# Generated by Django 5.1.10 on 2025-06-24 21:19
import logging

from django.db import migrations
from django.db.models import Count
from core.redis import start_job_async_or_sync
from core.models import AsyncMigrationStatus
from data_manager.models import FilterGroup, Filter

logger = logging.getLogger(__name__)


migration_name = '0013_cleanup_inconsistent_filtergroup_20250624_2119'


def cleanup_inconsistent_filtergroup():
    """
    Grabs filter groups related to more than one view.
    Creates a new filter group and filters for each view based on the filter group, so filter groups aren't shared.
    """

    migration, created = AsyncMigrationStatus.objects.get_or_create(name=migration_name, defaults={'status': AsyncMigrationStatus.STATUS_STARTED})
    if not created:
        return # migration already done or in progress
    
    migration.meta['project_ids'] = []
    
    filter_groups = FilterGroup.objects.annotate(view_count=Count('view')).filter(view_count__gt=1)

    for filter_group in filter_groups:
        first_view = filter_group.view_set.first()

        for view in filter_group.view_set.all():
            migration.meta['project_ids'].append(view.project_id)
            migration.save(update_fields=['meta'])

            if view == first_view: # skip first view
                continue
            
            logger.info(f'Creating new filter group for view {view.id} for project {view.project_id}')
            # create new filter group and filters for the view
            new_filter_group = FilterGroup.objects.create(conjunction=filter_group.conjunction)
            for filter in filter_group.filters.all():
                new_filter = Filter.objects.create(
                    index=filter.index,
                    column=filter.column,
                    type=filter.type,
                    operator=filter.operator,
                    value=filter.value,
                )
                new_filter_group.filters.add(new_filter)
            view.filter_group = new_filter_group
            view.save(update_fields=['filter_group'])
            
            logger.info(f'Created new filter group {new_filter_group.id} for view {view.id} for project {view.project_id}')

    migration.status = AsyncMigrationStatus.STATUS_FINISHED
    migration.save(update_fields=['status'])

def forward(apps, schema_editor):
    start_job_async_or_sync(cleanup_inconsistent_filtergroup, queue_name='low', job_timeout=60 * 60 * 24) # 24 hours

def backward(apps, schema_editor):
    AsyncMigrationStatus = apps.get_model('core', 'AsyncMigrationStatus')
    AsyncMigrationStatus.objects.filter(name=migration_name).delete()


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("data_manager", "0012_alter_view_user"),
    ]

    operations = [
        migrations.RunPython(forward, backward),
    ]
