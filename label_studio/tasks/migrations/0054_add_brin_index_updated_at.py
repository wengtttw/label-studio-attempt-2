# Generated by Django on 2025-05-23 12:00

from django.db import migrations, connection
from django.conf import settings
from core.redis import start_job_async_or_sync
from core.models import AsyncMigrationStatus
import logging

logger = logging.getLogger(__name__)

migration_name = '0054_add_brin_index_updated_at'

def forward_migration(migration_name):
    migration = AsyncMigrationStatus.objects.create(
        name=migration_name,
        status=AsyncMigrationStatus.STATUS_STARTED,
    )
    logger.debug(f'Start async migration {migration_name}')
    
    # Check database backend and use appropriate SQL
    if connection.vendor == 'postgresql':
        # Create BRIN index concurrently to avoid blocking writes
        sql = '''
        CREATE INDEX CONCURRENTLY IF NOT EXISTS "task_updated_at_brin_idx" 
        ON "task" USING BRIN ("updated_at");
        '''
    else:
        # SQLite fallback - regular B-tree index
        sql = '''
        CREATE INDEX IF NOT EXISTS "task_updated_at_brin_idx" 
        ON "task" ("updated_at");
        '''
    
    with connection.cursor() as cursor:
        cursor.execute(sql)
    
    migration.status = AsyncMigrationStatus.STATUS_FINISHED
    migration.save()
    logger.debug(f'Async migration {migration_name} complete')

def reverse_migration(migration_name):
    migration = AsyncMigrationStatus.objects.create(
        name=migration_name,
        status=AsyncMigrationStatus.STATUS_STARTED,
    )
    logger.debug(f'Start async migration rollback {migration_name}')
    
    # Drop index (works for both PostgreSQL and SQLite)
    if connection.vendor == 'postgresql':
        sql = 'DROP INDEX CONCURRENTLY IF EXISTS "task_updated_at_brin_idx";'
    else:
        sql = 'DROP INDEX IF EXISTS "task_updated_at_brin_idx";'
    
    with connection.cursor() as cursor:
        cursor.execute(sql)
    
    migration.status = AsyncMigrationStatus.STATUS_FINISHED
    migration.save()
    logger.debug(f'Async migration rollback {migration_name} complete')

def forwards(apps, schema_editor):
    start_job_async_or_sync(forward_migration, migration_name=migration_name)

def backwards(apps, schema_editor):
    start_job_async_or_sync(reverse_migration, migration_name=migration_name)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("tasks", "0053_annotation_bulk_created"),
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ] 